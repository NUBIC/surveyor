- renderer = g.renderer
= f.inputs q_text(g), :id => "g_#{g.id}", :class => "g_#{renderer} #{g.css_class(@response_set)}" do
  %li.help= g.help_text
  - case renderer
    - when :grid
      %li
        %table
          %col.pre
          - qs.first.answers.each do |a|
            %col{:class => cycle("odd", "even")}
          %col.post
          %tbody
            - qs.each_slice(10) do |ten_questions| # header row every 10
              %tr
                %th &nbsp;
                - ten_questions.first.answers.each do |a|
                  %th= a_text(a)
                %th &nbsp;
              - ten_questions.each_with_index do |q, i|
                %tr{:id => "q_#{q.id}", :class => "q_#{renderer} #{q.css_class(@response_set)}"}
                  - if q.pick == "one"
                    - r = response_for(@response_set, q, nil, g)
                    - i = response_idx  # increment the response index since the answer partial skips for q.pick == one
                    = f.semantic_fields_for i, r do |ff|
                      = ff.quiet_input :question_id
                      = ff.quiet_input :id unless r.new_record?
                  %th= q.split_text(:pre)
                  - q.answers.each do |a|
                    %td
                      - if a.custom_renderer
                        = render a.custom_renderer, :g => g, :q => q, :a => a, :f => f
                      - else
                        = render_answer(q, a, f, nil, g)
                  %th= q.split_text(:post)
    - when :repeater
      - (@response_set.count_group_responses(qs) + 1).times do |rg|
        %li
          - qs.each do |q|
            - if q.custom_renderer
              = render q.custom_renderer, :g => g, :rg => rg, :q => q, :f => f
            - else
              = render_question(g, rg, q, f)
      = submit_tag("+ add row", :name => "section[#{@section.id}][g_#{g.id}]", :class => "add_row")
    - else # :inline
      - qs.each do |q|
        - if q.custom_renderer
          = render q.custom_renderer, :g => g, :q => q, :f => f
        - else
          = render_question(g, nil, q, f)
